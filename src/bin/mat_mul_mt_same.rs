#![no_std]
#![no_main]

extern crate alloc;

use alloc::sync::Arc;
use alloc::vec::Vec;
use rust_riscv_benches::metrics::{get_metrics, Metrics, MetricsCSV};
use rust_riscv_benches::pxet::asm::{smalbb, smaltt};
use rust_riscv_benches::pxet::structure::{Matrix, PextMat};
use rust_riscv_benches::thread::{event_loop, event_loop_until_empty, spawn};
use rust_riscv_benches::{get_thread_count, println, pxet::asm::smul16};

#[unsafe(no_mangle)]
#[inline(never)]
fn mat_mul_i16(a: &Matrix<i16>, b: &Matrix<i16>, result: &mut Matrix<i32>) {
    // assert_eq!(a.width, b.height);
    for h_idx in 0..a.height {
        for w_idx in 0..b.width {
            unsafe {
                let mut sum = 0;
                for k_idx in 0..a.width {
                    sum += *a.get_at(k_idx, h_idx).unwrap_unchecked() as i32
                        * *b.get_at(w_idx, k_idx).unwrap_unchecked() as i32;
                }
                *result.get_mut_at(w_idx, h_idx).unwrap_unchecked() = sum;
            }
        }
    }
}

#[unsafe(no_mangle)]
#[inline(never)]
fn mat_mul_i16_smul16(a: &PextMat<i16>, b: &PextMat<i16>, result: &mut PextMat<i32>) {
    // assert_eq!(a.width, b.height);
    let out_alloc_width = result.alloc_width() * result.ratio();
    let out_slice = unsafe { result.get_slice_mut_as_type() };
    let a_slice = a.get_slice();
    let a_alloc_width = a.alloc_width();
    // let b_slice = b.get_slice();
    for h_idx in 0..a.height {
        for w_idx in 0..b.width {
            unsafe {
                let out_p = out_slice.get_unchecked_mut(w_idx + h_idx * out_alloc_width);
                let a_ptr = a_slice.get_unchecked(h_idx * a_alloc_width) as *const usize;
                let mut sum = 0;
                for (p_idx, k_idx) in (0..a.width).step_by(4).enumerate() {
                    let a_part = *a_ptr.add(p_idx);
                    let b_part = b.get_col_at(w_idx, k_idx);
                    let mul_l = smul16(a_part, b_part);
                    let mul_h = smul16(a_part >> 32, b_part >> 32);

                    sum += ((mul_l & 0xFFFF_FFFF) as i32)
                        + (((mul_l >> 32) & 0xFFFF_FFFF) as i32)
                        + ((mul_h & 0xFFFF_FFFF) as i32)
                        + (((mul_h >> 32) & 0xFFFF_FFFF) as i32);
                }
                *out_p = sum;
            }
        }
    }
}

#[unsafe(no_mangle)]
#[inline(never)]
fn mat_mul_i16_smul16_transposed(a: &PextMat<i16>, b: &PextMat<i16>, result: &mut PextMat<i32>) {
    // assert_eq!(a.width, b.height);
    let out_alloc_width = result.alloc_width() * result.ratio();
    let out_slice = unsafe { result.get_slice_mut_as_type() };
    let a_slice = a.get_slice();
    let a_alloc_width = a.alloc_width();
    // let b_slice = b.get_slice();
    for h_idx in 0..a.height {
        for w_idx in 0..b.width {
            unsafe {
                let out_p = out_slice.get_unchecked_mut(w_idx + h_idx * out_alloc_width);
                let a_ptr = a_slice.get_unchecked(h_idx * a_alloc_width) as *const usize;
                let mut sum = 0;
                for (p_idx, k_idx) in (0..a.width).step_by(4).enumerate() {
                    let a_part = *a_ptr.add(p_idx);
                    let b_part = b.get_col_at(w_idx, k_idx);
                    let mul_l = smul16(a_part, b_part);
                    let mul_h = smul16(a_part >> 32, b_part >> 32);

                    sum += ((mul_l & 0xFFFF_FFFF) as i32)
                        + (((mul_l >> 32) & 0xFFFF_FFFF) as i32)
                        + ((mul_h & 0xFFFF_FFFF) as i32)
                        + (((mul_h >> 32) & 0xFFFF_FFFF) as i32);
                }
                *out_p = sum;
            }
        }
    }
}

#[unsafe(no_mangle)]
#[inline(never)]
fn mat_mul_i16_smal(a: &PextMat<i16>, b: &PextMat<i16>, result: &mut PextMat<i32>) {
    // assert_eq!(a.width, b.height);
    let out_alloc_width = result.alloc_width() * result.ratio();
    let out_slice = unsafe { result.get_slice_mut_as_type() };
    let a_slice = a.get_slice();
    let a_alloc_width = a.alloc_width();
    // let b_slice = b.get_slice();
    for h_idx in 0..a.height {
        for w_idx in 0..b.width {
            unsafe {
                let out_p = out_slice.get_unchecked_mut(w_idx + h_idx * out_alloc_width);
                let mut out = 0;
                let a_ptr = a_slice.get_unchecked(h_idx * a_alloc_width) as *const usize;
                for (p_idx, k_idx) in (0..a.width).step_by(4).enumerate() {
                    let a_part = *a_ptr.add(p_idx);
                    let b_part = b.get_col_at(w_idx, k_idx);
                    out = smalbb(out, a_part, b_part);
                    out = smaltt(out, a_part, b_part);
                }
                *out_p = out as i32;
            }
        }
    }
}

#[unsafe(no_mangle)]
#[inline(never)]
fn mat_mul_i16_smal_transposed(a: &PextMat<i16>, b: &PextMat<i16>, result: &mut PextMat<i32>) {
    // assert_eq!(a.width, b.height);
    let out_alloc_width = result.alloc_width() * result.ratio();
    let out_slice = unsafe { result.get_slice_mut_as_type() };
    let a_slice = a.get_slice();
    let b_slice = b.get_slice();
    let a_alloc_width = a.alloc_width();
    let b_alloc_width = b.alloc_width();
    // let b_slice = b.get_slice();
    for h_idx in 0..a.height {
        for w_idx in 0..b.width {
            unsafe {
                let mut out = 0;
                let a_ptr = a_slice.get_unchecked(h_idx * a_alloc_width) as *const usize;
                let b_ptr = b_slice.get_unchecked(if (h_idx + w_idx) > b.width {
                    (h_idx + w_idx - b.width) * b_alloc_width
                } else {
                    (h_idx + w_idx) * b_alloc_width
                }) as *const usize;
                for (p_idx, _) in (0..a.width).step_by(4).enumerate() {
                    let a_part = *a_ptr.add(p_idx);
                    let b_part = *b_ptr.add(p_idx);
                    out = smalbb(out, a_part, b_part);
                    out = smaltt(out, a_part, b_part);
                }
                let out_p = out_slice.get_unchecked_mut(w_idx + h_idx * out_alloc_width);
                *out_p = out as i32;
            }
        }
    }
}

const TEST_DATA_A_I16: &[i16] = &[
    12206, -19181, -19180, -13177, -8985, 16826, -13831, -10524, 20724, -18190, 26366, -32454,
    -1569, 1556, -21268, 20407, 6439, -19077, 5492, 27923, -4467, -12965, -27812, -29628, 14609,
    -16203, 31382, -12490, 12623, 4996, 20750, 17954, -18527, -9420, 20412, -3505, 2641, 22606,
    -2715, 12224, 22502, 16984, -16806, -22038, -18797, 32733, 21229, 3553, -11190, -17255, -11713,
    -2799, 16136, -15855, -62, -19478, -15975, 12384, -16882, -13909, -4334, -11591, 6686, -8634,
    -6601, -3137, 25471, 3157, 14112, -12427, -9259, -32650, 14280, -15548, 26959, -26331, 18033,
    2214, -9177, 25745, -25870, -18920, -30785, 29514, 13466, -19600, -24369, 12399, -21776, 13909,
    -15719, -11721, 4904, -5286, 2477, 27120, -26589, 870, 15416, 5909, -14138, 10438, 5934, 18238,
    27125, -4212, -16420, -10567, -30339, 26143, -25742, 30929, -1548, -10460, -32042, -30855,
    21748, 25416, -487, 5179, -4404, -12130, 24995, -14515, -7768, 32303, -23078, 3392, -14195,
    -19011, -2716, -25004, 14190, -13570, -30804, -3979, -1549, 13477, 17505, 7514, 7084, 5094,
    -16567, 25577, 9468, 23785, 4253, -26583, 24947, -20389, -1642, -7817, 13914, -19369, -23335,
    29744, 20838, -16142, -16429, 28786, -24671, 17623, 5342, -18388, -15962, 5420, -30684, -2362,
    -9237, -48, -15246, 19872, -12873, -6784, 3896, -29563, -18835, 31004, -2126, 21642, -8850,
    -12655, 2243, 14987, 10022, -22197, 23527, -8331, 6176, 25696, -7286, 3455, -7334, -25608,
    -30018, 13239, -13208, 12333, 31261, -14736, -22879, 17688, 5455, 14828, -13001, 20953, -15967,
    -27116, 30443, 20439, 22581, 29436, 25579, 11452, 29117, -1680, -21765, 22174, -26826, -11693,
    15617, 8611, 12707, 13790, 7679, -5809, 11668, -16160, 12496, -23913, 23263, -19127, -18955,
    48, 6369, 15380, -28597, 2999, -19365, 10494, -2404, 18789, -6529, -30986, 26102, 23955,
    -15534, 8792, 18872, 1907, 8920, -32701, -26695, -25634, -30923, 7920, 12206, -19181, -19180,
    -13177, -8985, 16826, -13831, -10524, 20724, -18190, 26366, -32454, -1569, 1556, -21268, 20407,
    6439, -19077, 5492, 27923, -4467, -12965, -27812, -29628, 14609, -16203, 31382, -12490, 12623,
    4996, 20750, 17954, -18527, -9420, 20412, -3505, 2641, 22606, -2715, 12224, 22502, 16984,
    -16806, -22038, -18797, 32733, 21229, 3553, -11190, -17255, -11713, -2799, 16136, -15855, -62,
    -19478, -15975, 12384, -16882, -13909, -4334, -11591, 6686, -8634, -6601, -3137, 25471, 3157,
    14112, -12427, -9259, -32650, 14280, -15548, 26959, -26331, 18033, 2214, -9177, 25745, -25870,
    -18920, -30785, 29514, 13466, -19600, -24369, 12399, -21776, 13909, -15719, -11721, 4904,
    -5286, 2477, 27120, -26589, 870, 15416, 5909, -14138, 10438, 5934, 18238, 27125, -4212, -16420,
    -10567, -30339, 26143, -25742, 30929, -1548, -10460, -32042, -30855, 21748, 25416, -487, 5179,
    -4404, -12130, 24995, -14515, -7768, 32303, -23078, 3392, -14195, -19011, -2716, -25004, 14190,
    -13570, -30804, -3979, -1549, 13477, 17505, 7514, 7084, 5094, -16567, 25577, 9468, 23785, 4253,
    -26583, 24947, -20389, -1642, -7817, 13914, -19369, -23335, 29744, 20838, -16142, -16429,
    28786, -24671, 17623, 5342, -18388, -15962, 5420, -30684, -2362, -9237, -48, -15246, 19872,
    -12873, -6784, 3896, -29563, -18835, 31004, -2126, 21642, -8850, -12655, 2243, 14987, 10022,
    -22197, 23527, -8331, 6176, 25696, -7286, 3455, -7334, -25608, -30018, 13239, -13208, 12333,
    31261, -14736, -22879, 17688, 5455, 14828, -13001, 20953, -15967, -27116, 30443, 20439, 22581,
    29436, 25579, 11452, 29117, -1680, -21765, 22174, -26826, -11693, 15617, 8611, 12707, 13790,
    7679, -5809, 11668, -16160, 12496, -23913, 23263, -19127, -18955, 48, 6369, 15380, -28597,
    2999, -19365, 10494, -2404, 18789, -6529, -30986, 26102, 23955, -15534, 8792, 18872, 1907,
    8920, -32701, -26695, -25634, -30923, 7920, 12206, -19181, -19180, -13177, -8985, 16826,
    -13831, -10524, 20724, -18190, 26366, -32454, -1569, 1556, -21268, 20407, 6439, -19077, 5492,
    27923, -4467, -12965, -27812, -29628, 14609, -16203, 31382, -12490, 12623, 4996, 20750, 17954,
    -18527, -9420, 20412, -3505, 2641, 22606, -2715, 12224, 22502, 16984, -16806, -22038, -18797,
    32733, 21229, 3553, -11190, -17255, -11713, -2799, 16136, -15855, -62, -19478, -15975, 12384,
    -16882, -13909, -4334, -11591, 6686, -8634, -6601, -3137, 25471, 3157, 14112, -12427, -9259,
    -32650, 14280, -15548, 26959, -26331, 18033, 2214, -9177, 25745, -25870, -18920, -30785, 29514,
    13466, -19600, -24369, 12399, -21776, 13909, -15719, -11721, 4904, -5286, 2477, 27120, -26589,
    870, 15416, 5909, -14138, 10438, 5934, 18238, 27125, -4212, -16420, -10567, -30339, 26143,
    -25742, 30929, -1548, -10460, -32042, -30855, 21748, 25416, -487, 5179, -4404, -12130, 24995,
    -14515, -7768, 32303, -23078, 3392, -14195, -19011, -2716, -25004, 14190, -13570, -30804,
    -3979, -1549, 13477, 17505, 7514, 7084, 5094, -16567, 25577, 9468, 23785, 4253, -26583, 24947,
    -20389, -1642, -7817, 13914, -19369, -23335, 29744, 20838, -16142, -16429, 28786, -24671,
    17623, 5342, -18388, -15962, 5420, -30684, -2362, -9237, -48, -15246, 19872, -12873, -6784,
    3896, -29563, -18835, 31004, -2126, 21642, -8850, -12655, 2243, 14987, 10022, -22197, 23527,
    -8331, 6176, 25696, -7286, 3455, -7334, -25608, -30018, 13239, -13208, 12333, 31261, -14736,
    -22879, 17688, 5455, 14828, -13001, 20953, -15967, -27116, 30443, 20439, 22581, 29436, 25579,
    11452, 29117, -1680, -21765, 22174, -26826, -11693, 15617, 8611, 12707, 13790, 7679, -5809,
    11668, -16160, 12496, -23913, 23263, -19127, -18955, 48, 6369, 15380, -28597, 2999, -19365,
    10494, -2404, 18789, -6529, -30986, 26102, 23955, -15534, 8792, 18872, 1907, 8920, -32701,
    -26695, -25634, -30923, 7920, 12206, -19181, -19180, -13177, -8985, 16826, -13831, -10524,
    20724, -18190, 26366, -32454, -1569, 1556, -21268, 20407, 6439, -19077, 5492, 27923, -4467,
    -12965, -27812, -29628, 14609, -16203, 31382, -12490, 12623, 4996, 20750, 17954, -18527, -9420,
    20412, -3505, 2641, 22606, -2715, 12224, 22502, 16984, -16806, -22038, -18797, 32733, 21229,
    3553, -11190, -17255, -11713, -2799, 16136, -15855, -62, -19478, -15975, 12384, -16882, -13909,
    -4334, -11591, 6686, -8634, -6601, -3137, 25471, 3157, 14112, -12427, -9259, -32650, 14280,
    -15548, 26959, -26331, 18033, 2214, -9177, 25745, -25870, -18920, -30785, 29514, 13466, -19600,
    -24369, 12399, -21776, 13909, -15719, -11721, 4904, -5286, 2477, 27120, -26589, 870, 15416,
    5909, -14138, 10438, 5934, 18238, 27125, -4212, -16420, -10567, -30339, 26143, -25742, 30929,
    -1548, -10460, -32042, -30855, 21748, 25416, -487, 5179, -4404, -12130, 24995, -14515, -7768,
    32303, -23078, 3392, -14195, -19011, -2716, -25004, 14190, -13570, -30804, -3979, -1549, 13477,
    17505, 7514, 7084, 5094, -16567, 25577, 9468, 23785, 4253, -26583, 24947, -20389, -1642, -7817,
    13914, -19369, -23335, 29744, 20838, -16142, -16429, 28786, -24671, 17623, 5342, -18388,
    -15962, 5420, -30684, -2362, -9237, -48, -15246, 19872, -12873, -6784, 3896, -29563, -18835,
    31004, -2126, 21642, -8850, -12655, 2243, 14987, 10022, -22197, 23527, -8331, 6176, 25696,
    -7286, 3455, -7334, -25608, -30018, 13239, -13208, 12333, 31261, -14736, -22879, 17688, 5455,
    14828, -13001, 20953, -15967, -27116, 30443, 20439, 22581, 29436, 25579, 11452, 29117, -1680,
    -21765, 22174, -26826, -11693, 15617, 8611, 12707, 13790, 7679, -5809, 11668, -16160, 12496,
    -23913, 23263, -19127, -18955, 48, 6369, 15380, -28597, 2999, -19365, 10494, -2404, 18789,
    -6529, -30986, 26102, 23955, -15534, 8792, 18872, 1907, 8920, -32701, -26695, -25634, -30923,
    7920,
];

const TEST_DATA_B_I16: &[i16] = &[
    27965, 21325, -20166, 20583, -6355, 11500, -13379, -12881, -20977, 22291, -22814, 23399, 19414,
    9728, -23628, -18570, -24113, 15854, 12438, -9205, 13612, -27364, -23106, -16927, -5284, -827,
    28238, 22085, -6244, -18656, 27303, -14389, 6117, 17068, 31000, 31920, -26293, -21720, -7070,
    2116, 28751, -6170, 7292, 19007, 15906, -1410, -18772, 19035, 30461, 21578, 21742, -5502,
    -12916, 32173, 22949, -29378, 27273, -10465, -31654, -4951, -2173, -727, 22530, -32701, -27760,
    -4433, 261, -12942, 28993, -28582, 12007, 17673, -7576, 10185, 24255, -17313, -30777, 9256,
    -11250, 700, -5600, 907, -5052, 17, -25771, 3645, 29006, 26969, -3925, -82, -3012, 3745, -5150,
    -2186, 10410, 7433, -19844, 28948, 22566, -27330, 7477, -17880, 4645, 30797, 24661, 25790, 448,
    -32186, 17012, 16921, 18285, 6101, 25874, -7127, 32513, -19943, 21264, -988, -17097, 30782,
    20891, 22650, 6004, -11778, -5879, -6173, -4320, 20982, 20940, 23868, 32365, -21246, -29436,
    21864, -15512, 9265, 26123, 9361, 21321, -20574, -25511, 26227, -15012, -24659, 20007, -17760,
    20502, 31789, 18769, -6597, -30324, 18408, -30129, -8583, 19787, 11288, 12367, 20003, -18114,
    30167, 18533, 25834, 26840, -20710, 11560, -7264, -15348, -15621, -25853, 9419, 32662, 27480,
    9691, 26570, 26602, -21326, 8706, -24367, -23495, 21973, 29148, 16235, -15175, 10768, 2239,
    30534, 31909, -28764, -21928, 4738, 29705, -26194, 1596, 22692, -26188, -14956, -23253, 7927,
    -2412, 2469, -23483, -760, 19465, 5362, 8367, 17454, -25126, 6417, -28690, -30119, -5048,
    -3077, 21108, -18611, 26691, -26719, 16003, -32676, 6329, -31582, 15019, 11497, 32101, -26641,
    23643, 3974, 22960, 29167, 6848, -16962, -17778, 31648, -3930, 3887, 15786, -4353, 2645,
    -12435, -31042, 2030, -26385, -16648, 7300, 27404, -6193, 26442, 31378, -1111, -16736, -32418,
    -4396, 10951, 26414, 21041, 4702, -11641, 27965, 21325, -20166, 20583, -6355, 11500, -13379,
    -12881, -20977, 22291, -22814, 23399, 19414, 9728, -23628, -18570, -24113, 15854, 12438, -9205,
    13612, -27364, -23106, -16927, -5284, -827, 28238, 22085, -6244, -18656, 27303, -14389, 6117,
    17068, 31000, 31920, -26293, -21720, -7070, 2116, 28751, -6170, 7292, 19007, 15906, -1410,
    -18772, 19035, 30461, 21578, 21742, -5502, -12916, 32173, 22949, -29378, 27273, -10465, -31654,
    -4951, -2173, -727, 22530, -32701, -27760, -4433, 261, -12942, 28993, -28582, 12007, 17673,
    -7576, 10185, 24255, -17313, -30777, 9256, -11250, 700, -5600, 907, -5052, 17, -25771, 3645,
    29006, 26969, -3925, -82, -3012, 3745, -5150, -2186, 10410, 7433, -19844, 28948, 22566, -27330,
    7477, -17880, 4645, 30797, 24661, 25790, 448, -32186, 17012, 16921, 18285, 6101, 25874, -7127,
    32513, -19943, 21264, -988, -17097, 30782, 20891, 22650, 6004, -11778, -5879, -6173, -4320,
    20982, 20940, 23868, 32365, -21246, -29436, 21864, -15512, 9265, 26123, 9361, 21321, -20574,
    -25511, 26227, -15012, -24659, 20007, -17760, 20502, 31789, 18769, -6597, -30324, 18408,
    -30129, -8583, 19787, 11288, 12367, 20003, -18114, 30167, 18533, 25834, 26840, -20710, 11560,
    -7264, -15348, -15621, -25853, 9419, 32662, 27480, 9691, 26570, 26602, -21326, 8706, -24367,
    -23495, 21973, 29148, 16235, -15175, 10768, 2239, 30534, 31909, -28764, -21928, 4738, 29705,
    -26194, 1596, 22692, -26188, -14956, -23253, 7927, -2412, 2469, -23483, -760, 19465, 5362,
    8367, 17454, -25126, 6417, -28690, -30119, -5048, -3077, 21108, -18611, 26691, -26719, 16003,
    -32676, 6329, -31582, 15019, 11497, 32101, -26641, 23643, 3974, 22960, 29167, 6848, -16962,
    -17778, 31648, -3930, 3887, 15786, -4353, 2645, -12435, -31042, 2030, -26385, -16648, 7300,
    27404, -6193, 26442, 31378, -1111, -16736, -32418, -4396, 10951, 26414, 21041, 4702, -11641,
    27965, 21325, -20166, 20583, -6355, 11500, -13379, -12881, -20977, 22291, -22814, 23399, 19414,
    9728, -23628, -18570, -24113, 15854, 12438, -9205, 13612, -27364, -23106, -16927, -5284, -827,
    28238, 22085, -6244, -18656, 27303, -14389, 6117, 17068, 31000, 31920, -26293, -21720, -7070,
    2116, 28751, -6170, 7292, 19007, 15906, -1410, -18772, 19035, 30461, 21578, 21742, -5502,
    -12916, 32173, 22949, -29378, 27273, -10465, -31654, -4951, -2173, -727, 22530, -32701, -27760,
    -4433, 261, -12942, 28993, -28582, 12007, 17673, -7576, 10185, 24255, -17313, -30777, 9256,
    -11250, 700, -5600, 907, -5052, 17, -25771, 3645, 29006, 26969, -3925, -82, -3012, 3745, -5150,
    -2186, 10410, 7433, -19844, 28948, 22566, -27330, 7477, -17880, 4645, 30797, 24661, 25790, 448,
    -32186, 17012, 16921, 18285, 6101, 25874, -7127, 32513, -19943, 21264, -988, -17097, 30782,
    20891, 22650, 6004, -11778, -5879, -6173, -4320, 20982, 20940, 23868, 32365, -21246, -29436,
    21864, -15512, 9265, 26123, 9361, 21321, -20574, -25511, 26227, -15012, -24659, 20007, -17760,
    20502, 31789, 18769, -6597, -30324, 18408, -30129, -8583, 19787, 11288, 12367, 20003, -18114,
    30167, 18533, 25834, 26840, -20710, 11560, -7264, -15348, -15621, -25853, 9419, 32662, 27480,
    9691, 26570, 26602, -21326, 8706, -24367, -23495, 21973, 29148, 16235, -15175, 10768, 2239,
    30534, 31909, -28764, -21928, 4738, 29705, -26194, 1596, 22692, -26188, -14956, -23253, 7927,
    -2412, 2469, -23483, -760, 19465, 5362, 8367, 17454, -25126, 6417, -28690, -30119, -5048,
    -3077, 21108, -18611, 26691, -26719, 16003, -32676, 6329, -31582, 15019, 11497, 32101, -26641,
    23643, 3974, 22960, 29167, 6848, -16962, -17778, 31648, -3930, 3887, 15786, -4353, 2645,
    -12435, -31042, 2030, -26385, -16648, 7300, 27404, -6193, 26442, 31378, -1111, -16736, -32418,
    -4396, 10951, 26414, 21041, 4702, -11641, 27965, 21325, -20166, 20583, -6355, 11500, -13379,
    -12881, -20977, 22291, -22814, 23399, 19414, 9728, -23628, -18570, -24113, 15854, 12438, -9205,
    13612, -27364, -23106, -16927, -5284, -827, 28238, 22085, -6244, -18656, 27303, -14389, 6117,
    17068, 31000, 31920, -26293, -21720, -7070, 2116, 28751, -6170, 7292, 19007, 15906, -1410,
    -18772, 19035, 30461, 21578, 21742, -5502, -12916, 32173, 22949, -29378, 27273, -10465, -31654,
    -4951, -2173, -727, 22530, -32701, -27760, -4433, 261, -12942, 28993, -28582, 12007, 17673,
    -7576, 10185, 24255, -17313, -30777, 9256, -11250, 700, -5600, 907, -5052, 17, -25771, 3645,
    29006, 26969, -3925, -82, -3012, 3745, -5150, -2186, 10410, 7433, -19844, 28948, 22566, -27330,
    7477, -17880, 4645, 30797, 24661, 25790, 448, -32186, 17012, 16921, 18285, 6101, 25874, -7127,
    32513, -19943, 21264, -988, -17097, 30782, 20891, 22650, 6004, -11778, -5879, -6173, -4320,
    20982, 20940, 23868, 32365, -21246, -29436, 21864, -15512, 9265, 26123, 9361, 21321, -20574,
    -25511, 26227, -15012, -24659, 20007, -17760, 20502, 31789, 18769, -6597, -30324, 18408,
    -30129, -8583, 19787, 11288, 12367, 20003, -18114, 30167, 18533, 25834, 26840, -20710, 11560,
    -7264, -15348, -15621, -25853, 9419, 32662, 27480, 9691, 26570, 26602, -21326, 8706, -24367,
    -23495, 21973, 29148, 16235, -15175, 10768, 2239, 30534, 31909, -28764, -21928, 4738, 29705,
    -26194, 1596, 22692, -26188, -14956, -23253, 7927, -2412, 2469, -23483, -760, 19465, 5362,
    8367, 17454, -25126, 6417, -28690, -30119, -5048, -3077, 21108, -18611, 26691, -26719, 16003,
    -32676, 6329, -31582, 15019, 11497, 32101, -26641, 23643, 3974, 22960, 29167, 6848, -16962,
    -17778, 31648, -3930, 3887, 15786, -4353, 2645, -12435, -31042, 2030, -26385, -16648, 7300,
    27404, -6193, 26442, 31378, -1111, -16736, -32418, -4396, 10951, 26414, 21041, 4702, -11641,
];

const CORRECT_OUTPUT: &[i32] = &[
    474368555,
    -1910476970,
    1549182098,
    -539287429,
    -517076836,
    1047442831,
    191141400,
    -1346011580,
    660625601,
    1422138060,
    -1266033531,
    208510346,
    2122135865,
    24548951,
    468505868,
    1319169830,
    1051828036,
    631806136,
    2088286121,
    739069706,
    -724824343,
    1593122415,
    1907965823,
    -1619138160,
    675370645,
    1802301339,
    -759203832,
    -1237164016,
    -1167058830,
    -1385139045,
    -583021742,
    2091916097,
    1074340267,
    -422789641,
    -742620289,
    -134129561,
    -1182247973,
    1255191106,
    -406983060,
    2052172709,
    -1665448549,
    -1722795007,
    1036457765,
    -1949315965,
    202026167,
    43452224,
    564604555,
    -144576432,
    -552076296,
    -1185206885,
    1856065080,
    1099939561,
    733429684,
    359432937,
    587829359,
    -2098831092,
    213754400,
    -496418181,
    98716623,
    -1901886825,
    -97719240,
    820651029,
    1006291239,
    2080244611,
    -206327136,
    -1925349235,
    -1845661815,
    -300591937,
    276991670,
    468432340,
    20978166,
    -1942380570,
    -1269592254,
    -523426425,
    540827209,
    617962011,
    988220388,
    -1108751988,
    -467054735,
    -427253918,
    1071078462,
    -471431744,
    1084768896,
    -1836847324,
    -1633285341,
    1068046354,
    -408655580,
    -1334900681,
    932467911,
    -1086140268,
    -947712340,
    -1764153541,
    1952311196,
    1849846662,
    -344049610,
    124132464,
    -983869442,
    -1017149537,
    -2115180200,
    1559951410,
    -794440654,
    -1049377973,
    -1969345937,
    -1703516973,
    47268452,
    -472828802,
    -2081195679,
    -430087895,
    360774061,
    -706464763,
    2054453088,
    -2124029706,
    -1976880955,
    -1707230878,
    -122490858,
    -286567975,
    308071538,
    -894920031,
    299652787,
    645187506,
    2072387757,
    1830001009,
    -2025920680,
    -486744651,
    -1145549352,
    999283576,
    1632960603,
    1204644709,
    2082343098,
    -1129961929,
    -1154611820,
    -1998607629,
    -931756800,
    1043353642,
    -1160750592,
    1892028932,
    -523342537,
    182899818,
    -935071458,
    1835298554,
    1731960748,
    -1314943083,
    2040739169,
    -1280864022,
    1139280918,
    1363307591,
    -1595090550,
    -1562762742,
    -1773849241,
    923954229,
    -1843241442,
    1797742540,
    60758854,
    -1510181929,
    -532568664,
    616426630,
    2018810372,
    1227559257,
    43286951,
    -251071621,
    1835935061,
    -1309701578,
    1833860816,
    -79939108,
    1732104468,
    1840156707,
    1217836931,
    285303584,
    1607905997,
    -829597703,
    329660065,
    -316261633,
    103091363,
    -1000071903,
    -1637643433,
    1690149247,
    -1402551347,
    1255205130,
    -392911008,
    -1063373220,
    -1743376225,
    -1616542438,
    1178693457,
    1124762620,
    1900950129,
    -2097371748,
    1914661765,
    -1039226323,
    -1416702327,
    -563244426,
    -683840319,
    -103553489,
    191162265,
    205607427,
    -2020721003,
    934945473,
    1670649236,
    -99470182,
    -750567087,
    -242271139,
    585025726,
    677708629,
    -1524584087,
    773246254,
    -1961366874,
    -867546423,
    1701607384,
    118472154,
    -1461969075,
    1558223805,
    669781877,
    -248872311,
    -93535091,
    472986903,
    -997805852,
    -664237293,
    -1085179503,
    1292819289,
    1146642048,
    -494797060,
    -974121728,
    740161054,
    -1592139030,
    2096629281,
    303552747,
    788086400,
    -937815984,
    -519136875,
    959747053,
    -371166591,
    335514101,
    -1310780483,
    -308437620,
    -1736286916,
    -1337685525,
    1585859522,
    -1514861889,
    1541235484,
    -1343490033,
    445633649,
    -975513840,
    -1418056993,
    -1347546282,
    481277331,
    355224995,
    1225606753,
    1884142054,
    -1382572300,
    -1410966292,
    -1040258403,
    -2130845208,
    -1524455328,
    72094381,
    -514706814,
    -727533304,
    -635942569,
    474368555,
    -1910476970,
    1549182098,
    -539287429,
    -517076836,
    1047442831,
    191141400,
    -1346011580,
    660625601,
    1422138060,
    -1266033531,
    208510346,
    2122135865,
    24548951,
    468505868,
    1319169830,
    1051828036,
    631806136,
    2088286121,
    739069706,
    -724824343,
    1593122415,
    1907965823,
    -1619138160,
    675370645,
    1802301339,
    -759203832,
    -1237164016,
    -1167058830,
    -1385139045,
    -583021742,
    2091916097,
    1074340267,
    -422789641,
    -742620289,
    -134129561,
    -1182247973,
    1255191106,
    -406983060,
    2052172709,
    -1665448549,
    -1722795007,
    1036457765,
    -1949315965,
    202026167,
    43452224,
    564604555,
    -144576432,
    -552076296,
    -1185206885,
    1856065080,
    1099939561,
    733429684,
    359432937,
    587829359,
    -2098831092,
    213754400,
    -496418181,
    98716623,
    -1901886825,
    -97719240,
    820651029,
    1006291239,
    2080244611,
    -206327136,
    -1925349235,
    -1845661815,
    -300591937,
    276991670,
    468432340,
    20978166,
    -1942380570,
    -1269592254,
    -523426425,
    540827209,
    617962011,
    988220388,
    -1108751988,
    -467054735,
    -427253918,
    1071078462,
    -471431744,
    1084768896,
    -1836847324,
    -1633285341,
    1068046354,
    -408655580,
    -1334900681,
    932467911,
    -1086140268,
    -947712340,
    -1764153541,
    1952311196,
    1849846662,
    -344049610,
    124132464,
    -983869442,
    -1017149537,
    -2115180200,
    1559951410,
    -794440654,
    -1049377973,
    -1969345937,
    -1703516973,
    47268452,
    -472828802,
    -2081195679,
    -430087895,
    360774061,
    -706464763,
    2054453088,
    -2124029706,
    -1976880955,
    -1707230878,
    -122490858,
    -286567975,
    308071538,
    -894920031,
    299652787,
    645187506,
    2072387757,
    1830001009,
    -2025920680,
    -486744651,
    -1145549352,
    999283576,
    1632960603,
    1204644709,
    2082343098,
    -1129961929,
    -1154611820,
    -1998607629,
    -931756800,
    1043353642,
    -1160750592,
    1892028932,
    -523342537,
    182899818,
    -935071458,
    1835298554,
    1731960748,
    -1314943083,
    2040739169,
    -1280864022,
    1139280918,
    1363307591,
    -1595090550,
    -1562762742,
    -1773849241,
    923954229,
    -1843241442,
    1797742540,
    60758854,
    -1510181929,
    -532568664,
    616426630,
    2018810372,
    1227559257,
    43286951,
    -251071621,
    1835935061,
    -1309701578,
    1833860816,
    -79939108,
    1732104468,
    1840156707,
    1217836931,
    285303584,
    1607905997,
    -829597703,
    329660065,
    -316261633,
    103091363,
    -1000071903,
    -1637643433,
    1690149247,
    -1402551347,
    1255205130,
    -392911008,
    -1063373220,
    -1743376225,
    -1616542438,
    1178693457,
    1124762620,
    1900950129,
    -2097371748,
    1914661765,
    -1039226323,
    -1416702327,
    -563244426,
    -683840319,
    -103553489,
    191162265,
    205607427,
    -2020721003,
    934945473,
    1670649236,
    -99470182,
    -750567087,
    -242271139,
    585025726,
    677708629,
    -1524584087,
    773246254,
    -1961366874,
    -867546423,
    1701607384,
    118472154,
    -1461969075,
    1558223805,
    669781877,
    -248872311,
    -93535091,
    472986903,
    -997805852,
    -664237293,
    -1085179503,
    1292819289,
    1146642048,
    -494797060,
    -974121728,
    740161054,
    -1592139030,
    2096629281,
    303552747,
    788086400,
    -937815984,
    -519136875,
    959747053,
    -371166591,
    335514101,
    -1310780483,
    -308437620,
    -1736286916,
    -1337685525,
    1585859522,
    -1514861889,
    1541235484,
    -1343490033,
    445633649,
    -975513840,
    -1418056993,
    -1347546282,
    481277331,
    355224995,
    1225606753,
    1884142054,
    -1382572300,
    -1410966292,
    -1040258403,
    -2130845208,
    -1524455328,
    72094381,
    -514706814,
    -727533304,
    -635942569,
    474368555,
    -1910476970,
    1549182098,
    -539287429,
    -517076836,
    1047442831,
    191141400,
    -1346011580,
    660625601,
    1422138060,
    -1266033531,
    208510346,
    2122135865,
    24548951,
    468505868,
    1319169830,
    1051828036,
    631806136,
    2088286121,
    739069706,
    -724824343,
    1593122415,
    1907965823,
    -1619138160,
    675370645,
    1802301339,
    -759203832,
    -1237164016,
    -1167058830,
    -1385139045,
    -583021742,
    2091916097,
    1074340267,
    -422789641,
    -742620289,
    -134129561,
    -1182247973,
    1255191106,
    -406983060,
    2052172709,
    -1665448549,
    -1722795007,
    1036457765,
    -1949315965,
    202026167,
    43452224,
    564604555,
    -144576432,
    -552076296,
    -1185206885,
    1856065080,
    1099939561,
    733429684,
    359432937,
    587829359,
    -2098831092,
    213754400,
    -496418181,
    98716623,
    -1901886825,
    -97719240,
    820651029,
    1006291239,
    2080244611,
    -206327136,
    -1925349235,
    -1845661815,
    -300591937,
    276991670,
    468432340,
    20978166,
    -1942380570,
    -1269592254,
    -523426425,
    540827209,
    617962011,
    988220388,
    -1108751988,
    -467054735,
    -427253918,
    1071078462,
    -471431744,
    1084768896,
    -1836847324,
    -1633285341,
    1068046354,
    -408655580,
    -1334900681,
    932467911,
    -1086140268,
    -947712340,
    -1764153541,
    1952311196,
    1849846662,
    -344049610,
    124132464,
    -983869442,
    -1017149537,
    -2115180200,
    1559951410,
    -794440654,
    -1049377973,
    -1969345937,
    -1703516973,
    47268452,
    -472828802,
    -2081195679,
    -430087895,
    360774061,
    -706464763,
    2054453088,
    -2124029706,
    -1976880955,
    -1707230878,
    -122490858,
    -286567975,
    308071538,
    -894920031,
    299652787,
    645187506,
    2072387757,
    1830001009,
    -2025920680,
    -486744651,
    -1145549352,
    999283576,
    1632960603,
    1204644709,
    2082343098,
    -1129961929,
    -1154611820,
    -1998607629,
    -931756800,
    1043353642,
    -1160750592,
    1892028932,
    -523342537,
    182899818,
    -935071458,
    1835298554,
    1731960748,
    -1314943083,
    2040739169,
    -1280864022,
    1139280918,
    1363307591,
    -1595090550,
    -1562762742,
    -1773849241,
    923954229,
    -1843241442,
    1797742540,
    60758854,
    -1510181929,
    -532568664,
    616426630,
    2018810372,
    1227559257,
    43286951,
    -251071621,
    1835935061,
    -1309701578,
    1833860816,
    -79939108,
    1732104468,
    1840156707,
    1217836931,
    285303584,
    1607905997,
    -829597703,
    329660065,
    -316261633,
    103091363,
    -1000071903,
    -1637643433,
    1690149247,
    -1402551347,
    1255205130,
    -392911008,
    -1063373220,
    -1743376225,
    -1616542438,
    1178693457,
    1124762620,
    1900950129,
    -2097371748,
    1914661765,
    -1039226323,
    -1416702327,
    -563244426,
    -683840319,
    -103553489,
    191162265,
    205607427,
    -2020721003,
    934945473,
    1670649236,
    -99470182,
    -750567087,
    -242271139,
    585025726,
    677708629,
    -1524584087,
    773246254,
    -1961366874,
    -867546423,
    1701607384,
    118472154,
    -1461969075,
    1558223805,
    669781877,
    -248872311,
    -93535091,
    472986903,
    -997805852,
    -664237293,
    -1085179503,
    1292819289,
    1146642048,
    -494797060,
    -974121728,
    740161054,
    -1592139030,
    2096629281,
    303552747,
    788086400,
    -937815984,
    -519136875,
    959747053,
    -371166591,
    335514101,
    -1310780483,
    -308437620,
    -1736286916,
    -1337685525,
    1585859522,
    -1514861889,
    1541235484,
    -1343490033,
    445633649,
    -975513840,
    -1418056993,
    -1347546282,
    481277331,
    355224995,
    1225606753,
    1884142054,
    -1382572300,
    -1410966292,
    -1040258403,
    -2130845208,
    -1524455328,
    72094381,
    -514706814,
    -727533304,
    -635942569,
    474368555,
    -1910476970,
    1549182098,
    -539287429,
    -517076836,
    1047442831,
    191141400,
    -1346011580,
    660625601,
    1422138060,
    -1266033531,
    208510346,
    2122135865,
    24548951,
    468505868,
    1319169830,
    1051828036,
    631806136,
    2088286121,
    739069706,
    -724824343,
    1593122415,
    1907965823,
    -1619138160,
    675370645,
    1802301339,
    -759203832,
    -1237164016,
    -1167058830,
    -1385139045,
    -583021742,
    2091916097,
    1074340267,
    -422789641,
    -742620289,
    -134129561,
    -1182247973,
    1255191106,
    -406983060,
    2052172709,
    -1665448549,
    -1722795007,
    1036457765,
    -1949315965,
    202026167,
    43452224,
    564604555,
    -144576432,
    -552076296,
    -1185206885,
    1856065080,
    1099939561,
    733429684,
    359432937,
    587829359,
    -2098831092,
    213754400,
    -496418181,
    98716623,
    -1901886825,
    -97719240,
    820651029,
    1006291239,
    2080244611,
    -206327136,
    -1925349235,
    -1845661815,
    -300591937,
    276991670,
    468432340,
    20978166,
    -1942380570,
    -1269592254,
    -523426425,
    540827209,
    617962011,
    988220388,
    -1108751988,
    -467054735,
    -427253918,
    1071078462,
    -471431744,
    1084768896,
    -1836847324,
    -1633285341,
    1068046354,
    -408655580,
    -1334900681,
    932467911,
    -1086140268,
    -947712340,
    -1764153541,
    1952311196,
    1849846662,
    -344049610,
    124132464,
    -983869442,
    -1017149537,
    -2115180200,
    1559951410,
    -794440654,
    -1049377973,
    -1969345937,
    -1703516973,
    47268452,
    -472828802,
    -2081195679,
    -430087895,
    360774061,
    -706464763,
    2054453088,
    -2124029706,
    -1976880955,
    -1707230878,
    -122490858,
    -286567975,
    308071538,
    -894920031,
    299652787,
    645187506,
    2072387757,
    1830001009,
    -2025920680,
    -486744651,
    -1145549352,
    999283576,
    1632960603,
    1204644709,
    2082343098,
    -1129961929,
    -1154611820,
    -1998607629,
    -931756800,
    1043353642,
    -1160750592,
    1892028932,
    -523342537,
    182899818,
    -935071458,
    1835298554,
    1731960748,
    -1314943083,
    2040739169,
    -1280864022,
    1139280918,
    1363307591,
    -1595090550,
    -1562762742,
    -1773849241,
    923954229,
    -1843241442,
    1797742540,
    60758854,
    -1510181929,
    -532568664,
    616426630,
    2018810372,
    1227559257,
    43286951,
    -251071621,
    1835935061,
    -1309701578,
    1833860816,
    -79939108,
    1732104468,
    1840156707,
    1217836931,
    285303584,
    1607905997,
    -829597703,
    329660065,
    -316261633,
    103091363,
    -1000071903,
    -1637643433,
    1690149247,
    -1402551347,
    1255205130,
    -392911008,
    -1063373220,
    -1743376225,
    -1616542438,
    1178693457,
    1124762620,
    1900950129,
    -2097371748,
    1914661765,
    -1039226323,
    -1416702327,
    -563244426,
    -683840319,
    -103553489,
    191162265,
    205607427,
    -2020721003,
    934945473,
    1670649236,
    -99470182,
    -750567087,
    -242271139,
    585025726,
    677708629,
    -1524584087,
    773246254,
    -1961366874,
    -867546423,
    1701607384,
    118472154,
    -1461969075,
    1558223805,
    669781877,
    -248872311,
    -93535091,
    472986903,
    -997805852,
    -664237293,
    -1085179503,
    1292819289,
    1146642048,
    -494797060,
    -974121728,
    740161054,
    -1592139030,
    2096629281,
    303552747,
    788086400,
    -937815984,
    -519136875,
    959747053,
    -371166591,
    335514101,
    -1310780483,
    -308437620,
    -1736286916,
    -1337685525,
    1585859522,
    -1514861889,
    1541235484,
    -1343490033,
    445633649,
    -975513840,
    -1418056993,
    -1347546282,
    481277331,
    355224995,
    1225606753,
    1884142054,
    -1382572300,
    -1410966292,
    -1040258403,
    -2130845208,
    -1524455328,
    72094381,
    -514706814,
    -727533304,
    -635942569,
];

fn i16_bench(size: usize, threads: usize) {
    // get teady for threading
    let mut handles = Vec::with_capacity(threads);
    // this is totaly unsafe, so becareful to what index to use
    let a = TEST_DATA_A_I16;
    let b = TEST_DATA_B_I16;
    let a_mat = Arc::new(Matrix::from_iter(size, size, a.iter().cloned()));
    let b_mat = Arc::new(Matrix::from_iter(size, size, b.iter().cloned()));

    let (normal_group_metric, normal_individual_metrics) = get_metrics(|| {
        for _ in 0..threads {
            let a_mat = a_mat.clone();
            let b_mat = b_mat.clone();
            let handle = spawn(move || {
                let mut out = Matrix::<i32>::zeroed(size, size);
                let m = get_metrics(|| {
                    mat_mul_i16(&a_mat, &b_mat, &mut out);
                })
                .0;
                assert!(out.inner.iter().zip(CORRECT_OUTPUT).all(|(a, b)| a == b));
                m
            });
            handles.push(handle);
        }
        event_loop_until_empty();
        let metrics: Vec<Metrics> = handles.into_iter().map(|h| *h.join()).collect();
        metrics
    });

    for m in normal_individual_metrics {
        println!("i,16,{},normal,{}", threads, m.csv());
    }

    // pext array

    // get teady for threading
    let mut handles: Vec<_> = Vec::with_capacity(threads);

    let a = TEST_DATA_A_I16;
    let b = TEST_DATA_B_I16;
    let a_mat = PextMat::<i16>::from_iter(size, size, a.iter().cloned());
    let b_mat = PextMat::<i16>::from_iter(size, size, b.iter().cloned());

    let (pext_group_metric, pext_individual_metrics) = get_metrics(|| {
        for _ in 0..threads {
            let a_mat = a_mat.clone();
            let b_mat = b_mat.clone();
            let handle = spawn(move || {
                let mut out = PextMat::<i32>::zeroed(size, size);
                let m = get_metrics(|| {
                    mat_mul_i16_smul16(&a_mat, &b_mat, &mut out);
                })
                .0;
                if !(out
                    .to_matrix()
                    .inner
                    .iter()
                    .zip(CORRECT_OUTPUT)
                    .all(|(a, b)| a == b))
                {
                    println!("{:?}", out.to_matrix().inner.iter());
                    panic!("WA");
                };
                m
            });
            handles.push(handle);
        }
        event_loop_until_empty();
        let metrics: Vec<_> = handles.into_iter().map(|h| *h.join()).collect();
        metrics
    });

    for m in pext_individual_metrics {
        println!("i,16,{},smul16,{}", threads, m.csv());
    }

    let mut handles: Vec<_> = Vec::with_capacity(threads);

    let (smal_group_metrics, smal_individual_metrics) = get_metrics(|| {
        for _ in 0..threads {
            let a_mat = a_mat.clone();
            let b_mat = b_mat.clone();
            let handle = spawn(move || {
                let mut out = PextMat::<i32>::zeroed(size, size);
                let m = get_metrics(|| {
                    mat_mul_i16_smal(&a_mat, &b_mat, &mut out);
                })
                .0;
                if !(out
                    .to_matrix()
                    .inner
                    .iter()
                    .zip(CORRECT_OUTPUT)
                    .all(|(a, b)| a == b))
                {
                    println!("{:?}", out.to_matrix().inner.iter());
                    panic!("WA");
                };
                m
            });
            handles.push(handle);
        }
        event_loop_until_empty();
        let metrics: Vec<_> = handles.into_iter().map(|h| *h.join()).collect();
        metrics
    });

    for m in smal_individual_metrics {
        println!("i,16,{},smal,{}", threads, m.csv());
    }

    let mut handles: Vec<_> = Vec::with_capacity(threads);

    let (smal_t_group_metrics, smal_t_individual_metrics) = get_metrics(|| {
        for _ in 0..threads {
            let a_mat = a_mat.clone();
            let b_mat = b_mat.clone();
            let handle = spawn(move || {
                let mut out = PextMat::<i32>::zeroed(size, size);
                let m = get_metrics(|| {
                    mat_mul_i16_smal_transposed(&a_mat, &b_mat, &mut out);
                })
                .0;
                // if !(out
                //     .to_matrix()
                //     .inner
                //     .iter()
                //     .zip(CORRECT_OUTPUT)
                //     .all(|(a, b)| a == b))
                // {
                //     println!("{:?}", out.to_matrix().inner.iter());
                //     panic!("WA");
                // };
                m
            });
            handles.push(handle);
        }
        event_loop_until_empty();
        let metrics: Vec<_> = handles.into_iter().map(|h| *h.join()).collect();
        metrics
    });

    for m in smal_t_individual_metrics {
        println!("i,16,{},smal_transpose,{}", threads, m.csv());
    }

    println!();
    println!("g,16,{},normal,{}", threads, normal_group_metric.csv());
    println!("g,16,{},smul16,{}", threads, pext_group_metric.csv());
    println!("g,16,{},smal,{}", threads, smal_group_metrics.csv());
    println!(
        "g,16,{},smal_transpose,{}",
        threads,
        smal_t_group_metrics.csv()
    );

    println!()
}
// fn i8_bench(tasks: usize, threads: usize) {
//     let data_a = Arc::new(PextVec::from(TEST_DATA_A_I8));
//     let data_b = Arc::new(PextVec::from(TEST_DATA_B_I8));

//     // get teady for threading
//     let mut handles = Vec::with_capacity(threads);

//     let (normal_group_metric, normal_individual_metrics) = get_metrics(|| {
//         for _ in 0..threads {
//             let handle = spawn(move || {
//                 get_metrics(|| {
//                     for _ in 0..tasks {
//                         // this is totaly unsafe, so becareful to what index to use
//                         let a = TEST_DATA_A_I8;
//                         let b = TEST_DATA_B_I8;
//                         element_wise_mul_i8(a, b);
//                     }
//                 })
//                 .0
//             });
//             handles.push(handle);
//         }
//         event_loop_until_empty();
//         let metrics: Vec<Metrics> = handles.into_iter().map(|h| *h.join()).collect();
//         metrics
//     });

//     for m in normal_individual_metrics {
//         println!("i,8,{},normal,{}", threads, m.csv());
//     }

//     // pext array

//     // get teady for threading
//     let mut handles = Vec::with_capacity(threads);

//     let (pext_group_metric, pext_individual_metrics) = get_metrics(|| {
//         for _ in 0..threads {
//             let data_a = data_a.clone();
//             let data_b = data_b.clone();

//             let handle = spawn(move || {
//                 get_metrics(|| {
//                     for _ in 0..tasks {
//                         element_wise_mul_i8_simd(&data_a, &data_b);
//                     }
//                 })
//                 .0
//             });
//             handles.push(handle);
//         }
//         event_loop_until_empty();
//         let metrics: Vec<Metrics> = handles.into_iter().map(|h| *h.join()).collect();
//         metrics
//     });

//     for m in pext_individual_metrics {
//         println!("i,8,{},pext,{}", threads, m.csv());
//     }

//     println!();
//     println!("g,8,{},normal,{}", threads, normal_group_metric.csv());
//     println!("g,8,{},pext,{}", threads, pext_group_metric.csv());

//     println!()
// }

#[inline(never)]
fn first_hart_entry() {
    println!("B4SMT evaluation program");
    println!("This program measures the performance difference of normal and pext matrix multiplication of arrays.");
    println!("START");

    println!(
        "individual-group,elemnt,threads,type,{}",
        MetricsCSV::HEADER
    );
    let thread_count = get_thread_count();
    let size = 32;
    for i in (1..=thread_count).rev() {
        i16_bench(size, i);
        // spawn(|| loop {});
        // i8_bench(tasks, i);
    }

    println!("END")
}

#[inline(never)]
fn other_hart_entry() {
    event_loop()
}

#[inline(never)]
#[unsafe(no_mangle)]
fn main(thread_id: usize) {
    if thread_id == 0 {
        first_hart_entry()
    } else {
        other_hart_entry()
    }
}
